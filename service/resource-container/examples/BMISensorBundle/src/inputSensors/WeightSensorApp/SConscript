##
# weightsensor sample app  build script
##

Import('env')

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
ws_sample_env = lib_env.Clone()

######################################################################
# Build flags
######################################################################
ws_sample_env.AppendUnique(CPPPATH = ['include'])
ws_sample_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-pthread'])
#GAR ws_sample_env.AppendUnique(CPPDEFINES = ['LINUX'])
ws_sample_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
ws_sample_env.AppendUnique(LIBS = ['coap'])
ws_sample_env.AppendUnique(LIBS = ['connectivity_abstraction'])
ws_sample_env.AppendUnique(LIBS = ['oc_logger'])
ws_sample_env.AppendUnique(LIBS = ['octbstack'])
ws_sample_env.AppendUnique(LIBS = ['oc'])
ws_sample_env.AppendUnique(LIBS = ['pthread'])

if env.get('SECURED') == '1':
    ws_sample_env.AppendUnique(LIBS = ['tinydtls'])

# On some platforms link order can miss functions so librt needs to be
# re-scanned at the end if present. gcc 4.6 is one with this issue.
target_os = env.get('TARGET_OS')  #GAR
if target_os in ['linux']:  #GAR
   if 'rt' in ws_sample_env.get('LIBS'):
      ws_sample_env.Append(LIBS = ['rt'])

######################################################################
#build sampleapp
######################################################################
weightsensorapp = ws_sample_env.Program('WeightSensorApp', 'src/WeightSensorApp.cpp')
Alias("weightsensorapp_sample", weightsensorapp)
env.AppendTarget('weightsensorapp')
